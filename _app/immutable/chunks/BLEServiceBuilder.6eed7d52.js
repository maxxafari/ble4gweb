const E=o=>{let e;return{connect:async()=>{var r;if(e=await navigator.bluetooth.requestDevice({filters:[{namePrefix:"nrf52"}],optionalServices:o.map(t=>t.serviceId)}),!e.gatt)throw new Error("No GATT server");const a=await((r=e.gatt)==null?void 0:r.connect());if(!a)throw new Error("No connect to GATT server");return await o.forEach(async t=>await t.addServiceTo(a)),!0},disconnect:async()=>{var a;await((a=e==null?void 0:e.gatt)==null?void 0:a.disconnect())},bleDevice:e}},V=o=>{const{name:e,serviceId:i,characteristicId:l,readParser:c,setParser:a}=o;let r,t;const u=async n=>{if(t=n,!t.connected)throw new Error("BLE Server not connected");console.info("getPrimaryService",i);const s=await t.getPrimaryService(i);return console.log("got primary service",i),r=await s.getCharacteristic(l),console.log("connected to: ",{name:e}),o.isNotifiable&&(console.log("add notification for: ",o.characteristicId),await r.startNotifications(),r.addEventListener("characteristicvaluechanged",f=>{const w=f.target;if(console.log("event",{name:e,event:f}),!c)throw new Error("readParser not defined");w.value&&d(c(w.value))})),!0};async function g(){if(!c)throw new Error("readParser not defined");return t!=null&&t.connected?await c(await r.readValue()):(console.warn("setVal, no connection",{name:e}),c(new DataView(new ArrayBuffer(0))))}async function v(n){await r.writeValue(n)}async function h(n){if(!a)throw new Error("setParser not defined");if(!(t!=null&&t.connected))return console.error(`${e} setVal, no connection`);const s=a(n);console.log("setVal",{value:n,parsedValue:s}),await r.writeValue(s)}let d=n=>{console.warn("onNotification not implemented:",{name:e,value:n})};return{addServiceTo:u,serviceId:i,getVal:g,setVal:h,setValRaw:v,onNotification:n=>{if(!o.isNotifiable)throw new Error(`${e} Characteristic is not set as notifiable`);d=n}}};export{E as a,V as c};
